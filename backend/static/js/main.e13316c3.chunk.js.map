{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["CustomModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","name","value","type","checked","activeItem","objectSpread","state","defineProperty","setState","_this2","_this$props","toggle","onSave","react_default","a","createElement","reactstrap_es","isOpen","for","title","onChange","placeholder","description","check","completed","color","onClick","Component","API","window","location","origin","username","Window","token","undefined","App","processError","err","response","data","keys","show","forEach","key","concat","alert","getHeader","headers","Authorization","refreshList","axios","get","then","res","todoList","catch","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","id","editItem","handleDelete","modal","handleSubmit","put","post","delete","createItem","Modal_CustomModal","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e13316c3.chunk.js","sourcesContent":["// frontend/src/components/Modal.js\n\nimport React, { Component } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label\n} from \"reactstrap\";\n\nexport default class CustomModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeItem: this.props.activeItem\n    };\n  }\n\n  handleChange = e => {\n    let { name, value } = e.target;\n    if (e.target.type === \"checkbox\") {\n      value = e.target.checked;\n    }\n    const activeItem = { ...this.state.activeItem, [name]: value };\n    this.setState({ activeItem });\n  };\n\n  render() {\n    const { toggle, onSave } = this.props;\n    return (\n      <Modal isOpen={true} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input\n                type=\"text\"\n                name=\"title\"\n                value={this.state.activeItem.title}\n                onChange={this.handleChange}\n                placeholder=\"Enter Todo Title\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"description\">Description</Label>\n              <Input\n                type=\"text\"\n                name=\"description\"\n                value={this.state.activeItem.description}\n                onChange={this.handleChange}\n                placeholder=\"Enter Todo description\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label for=\"completed\">\n                <Input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  checked={this.state.activeItem.completed}\n                  onChange={this.handleChange}\n                />\n                Completed\n              </Label>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n            Save\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n","// frontend/src/App.js\n\nimport React, { Component } from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\nconst API = window.location.origin+'/api/todos/' || \"http://localhost:8000/api/todos/\";\nconst username = Window.username ? Window.username : \"utilisateur generique\";\nconst token = Window.token || undefined;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewCompleted: false,\n      activeItem: {\n        title: \"\",\n        description: \"\",\n        completed: false,\n      },\n      todoList: [],\n    };\n  }\n  componentDidMount() {\n    this.refreshList();\n  }\n\n  processError = (err)=>{\n    if(err.response){\n      var data = err.response.data;\n      var keys = Object.keys(data);\n      var show = \"\";\n      keys.forEach(key =>{\n        show += `${key} : ${data[key]}`;\n      })\n      alert(show);\n    }\n    else{\n      alert(\"Erreur Inconnue\");\n    }\n  }\n\n  getHeader = ()=>{\n    var headers = {};\n    if(token){\n      headers = {\"Authorization\" : `Bearer ${token}`};\n    }\n    return headers;\n  }\n\n  refreshList = () => {\n    axios\n      .get(API , {headers : this.getHeader()})\n      .then((res) => this.setState({ todoList: res.data }))\n      .catch((err) => {\n       this.processError(err);\n      });\n  };\n  displayCompleted = (status) => {\n    if (status) {\n      return this.setState({ viewCompleted: true });\n    }\n    return this.setState({ viewCompleted: false });\n  };\n  renderTabList = () => {\n    return (\n      <div className=\"my-5 tab-list\">\n        <span\n          onClick={() => this.displayCompleted(true)}\n          className={this.state.viewCompleted ? \"active\" : \"\"}\n        >\n          complete\n        </span>\n        <span\n          onClick={() => this.displayCompleted(false)}\n          className={this.state.viewCompleted ? \"\" : \"active\"}\n        >\n          Incomplete\n        </span>\n      </div>\n    );\n  };\n  renderItems = () => {\n    const { viewCompleted } = this.state;\n    const newItems = this.state.todoList.filter(\n      (item) => item.completed === viewCompleted\n    );\n    return newItems.map((item) => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span\n          className={`todo-title mr-2 ${\n            this.state.viewCompleted ? \"completed-todo\" : \"\"\n          }`}\n          title={item.description}\n        >\n          {item.title}\n        </span>\n        <span>\n          <button\n            onClick={() => this.editItem(item)}\n            className=\"btn btn-secondary mr-2\"\n          >\n            {\" \"}\n            Edit{\" \"}\n          </button>\n          <button\n            onClick={() => this.handleDelete(item)}\n            className=\"btn btn-danger\"\n          >\n            Delete{\" \"}\n          </button>\n        </span>\n      </li>\n    ));\n  };\n  toggle = () => {\n    this.setState({ modal: !this.state.modal });\n  };\n  handleSubmit = (item) => {\n    this.toggle();\n    if (item.id) {\n      axios\n        .put(`${API}${item.id}/`, item , {headers : this.getHeader()})\n        .then((res) => this.refreshList())\n        .catch(err =>{\n          this.processError(err);\n        })\n      return;\n    }\n    axios\n      .post(API, item , {headers : this.getHeader()})\n      .then((res) => this.refreshList())\n      .catch(err =>{\n        this.processError(err);\n      });\n  };\n  handleDelete = (item) => {\n    axios\n      .delete(`${API}${item.id}` , {headers : this.getHeader()})\n      .then((res) => this.refreshList());\n  };\n  createItem = () => {\n    const item = { title: \"\", description: \"\", completed: false };\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  editItem = (item) => {\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  render() {\n    return (\n      <main className=\"content\">\n        <h1 className=\"text-white text-uppercase text-center my-4\">Wiafirm Todo app ({username})</h1>\n        <div className=\"row \">\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <div className=\"\">\n                <button onClick={this.createItem} className=\"btn btn-primary\">\n                  Add task\n                </button>\n              </div>\n              {this.renderTabList()}\n              <ul className=\"list-group list-group-flush\">\n                {this.renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n        {this.state.modal ? (\n          <Modal\n            activeItem={this.state.activeItem}\n            toggle={this.toggle}\n            onSave={this.handleSubmit}\n          />\n        ) : null}\n      </main>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n  // frontend/src/index.js\n  \n  import React from 'react';\n  import ReactDOM from 'react-dom';\n  import 'bootstrap/dist/css/bootstrap.min.css';       // add this\n  import './index.css';\n  import App from './App';\n  import * as serviceWorker from './serviceWorker';\n  \n  ReactDOM.render(<App />, document.getElementById('root'));\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.unregister();"],"sourceRoot":""}